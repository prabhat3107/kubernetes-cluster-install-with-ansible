- name: Swap off
  command: swapoff -a

- name: Remove Swap entry from /etc/fstab
  lineinfile:
    dest: /etc/fstab
    regexp: swap
    state: absent

- name: Enable kernel modules 
  command: "{{ item }}"
  with_items: 
    - modprobe overlay
    - modprobe br_netfilter

- name: Configure Persistent loading of moduels
  copy: 
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter
- name: Enable kernel moduels
  command: "{{ item }}"
  with_items:
    - modprobe overlay
    - modprobe br_netfilter

- name: Enable Bridging Add sysctl settings
  copy:
    dest: /etc/sysctl.d/kubernetes.conf
    content: |
      net.bridge.bridge-nf-call-ipv6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward =1 

- name: Apply sysctl changes 
  command: sysctl --system   
  
- name: Preapre for Kubernetes and Docker installation 
  ansible.builtin.apt:
    update_cache: yes
    pkg: 
      - ca-certificates
      - curl
      - gnupg2
      - lsb-release
      - apt-transport-https
      - software-properties-common
      - git
      - wget
      - vim
    state: present

- name: Install Docker official gpg key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Install Docker repo
  ansible.builtin.apt_repository: 
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu/ {{ ansible_distribution_release }} stable"
    state: present

- name: Install docker packages
  ansible.builtin.apt:
    update_cache: yes
    pkg:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-compose-plugin
    state: present

- name: Create daemon json config file for Docker
  copy: 
    dest: /etc/docker/daemon.json
    content: |
      {
        "exec-opts": ["native.cgroupdirver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2"
      }

- name: Enable docker service 
  systemd:
    name: docker
    state: restarted
    daemon_reload: true
    enable: true

- name: Find latest versioin for  cri-dockerd 
  uri:
    url: https://api.github.com/repos/Mirantis/cri-dockerd/releases/latest
    method: GET
    return_content: yes
    status_code: 200
    body_format: json
  register: page_content


- name: set cri_dockerd_verson
  set_fact: 
    cri_dockerd_verson: "{{ page_content.json.tag_name | replace('v','') }}"

- name: get cri-dockerd
  get_url: 
    #url: wget https://github.com/Mirantis/cri-dockerd/releases/download/v${VER}/cri-dockerd-${VER}.amd64.tgz
    url: https://github.com/Mirantis/cri-dockerd/releases/download/{{page_content.json.tag_name}}/cri-dockerd-{{cri_dockerd_verson}}.amd64.tgz
    dest: /tmp

- name: extract cir-dockerd
  unarchive: 
    remote_src: yes
    src: /tmp/cri-dockerd-{{cri_dockerd_verson}}.amd64.tgz
    dest: /tmp

- name: install cri-dockerd
  copy:
    remote_src: yes
    src: /tmp/cri-dockerd/cri-dockerd
    dest: /usr/local/bin/cri-dockerd
    mode: '0755'

- name: get cri-dockerd systemd 
  get_url:
    url: https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/{{ item }}
    dest: /etc/systemd/system/
  with_items:
    - cri-docker.service
    - cri-docker.socket

- name: update cir-dockerd service config
  ansible.builtin.replace:
    path: /etc/systemd/system/cri-docker.service
    regexp: '/usr/bin/cri-dockerd'
    replace: '/usr/local/bin/cri-dockerd'

- name: enable cri-docker services 
  systemd:
    daemon_reload: yes
    enabled: yes
    name: "{{ item }}"
  with_items:
    - cri-docker.service
    - cri-docker.socket

- name: Start  cri-docker.socket services 
  systemd:
    daemon_reload: yes
    state: started
    name: cri-docker.socket
